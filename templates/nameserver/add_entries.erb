#!/usr/bin/perl
use DBI;
use warnings;
use strict;

my $forward_domain = '<%= scope.lookupvar('pdns::nameserver::config::forward_domain') %>';
my $reverse_domain = '<%= scope.lookupvar('pdns::nameserver::config::reverse') %>';

<% if scope.lookupvar('pdns::nameserver::config::backend') == 'sqlite' -%>
# SQLite
my $dbh = DBI->connect("dbi:SQLite:dbname=/var/pdns/powerdns.sqlite", "", "")
  or die $DBI::errstr . "\n";
<% elsif scope.lookupvar('pdns::nameserver::config::backend') == 'postgresql' -%>
# Posgresql
my $dbh = DBI->connect("dbi:Pg:dbname=<%= scope.lookupvar('pdns::nameserver::config::gpsql_dbname') %>;host=<%= scope.lookupvar('pdns::nameserver::config::gpsql_host') %>;port=5432;", "<%= scope.lookupvar('pdns::nameserver::config::gpsql_user') %>", "<%= scope.lookupvar('pdns::nameserver::config::gpsql_password') %>", {AutoCommit => 1})
  or die $DBI::errstr . "\n";
<% end -%>

# Get domain id for forward domain (eg. 'local')
my ($forward_domain_id) =
  $dbh->selectrow_array("SELECT id FROM domains WHERE name='$forward_domain'");
die "Can't find id for domain $forward_domain\n" unless $forward_domain_id;

# Get domain id for reverse domain (eg. '10.in-addr.arpa')
my ($reverse_domain_id) =
  $dbh->selectrow_array("SELECT id FROM domains WHERE name='$reverse_domain'");
die "Can't find id for domain $reverse_domain\n" unless $reverse_domain_id;

# Add A record - input: hostname, IP
my $sth_insert_A =
  $dbh->prepare("INSERT INTO records (domain_id, name, type, content, ttl, prio) VALUES($forward_domain_id,?,'A',?,3600,NULL)");

# Add PTR (in-addr.arpa) record - input: reverse IP, hostname
my $sth_insert_PTR =
  $dbh->prepare("INSERT INTO records (domain_id, name, type, content, ttl, prio) VALUES($reverse_domain_id,?,'PTR',?,3600,NULL)");

# Get A record - input: hostname; output: IP
my $sth_select_A =
  $dbh->prepare("SELECT content from records where domain_id='$forward_domain_id' AND name=?");

# Get IP from A record - input: IP; output: hostname
my $sth_select_A_IP =
  $dbh->prepare("SELECT name from records where domain_id='$forward_domain_id' AND content=?");

# Get PTR record - input: reverse IP; output hostname
my $sth_select_PTR =
  $dbh->prepare("SELECT content from records where domain_id='$reverse_domain_id' AND name=?");

# Get reverse IP from PTR record - input: hostname; output: reverse IP
my $sth_select_PTR_host =
  $dbh->prepare("SELECT name from records where domain_id='$reverse_domain_id' AND content=?");

# Add entry - input: name, type, content
my $sth_insert_ENTRY =
  $dbh->prepare("INSERT INTO records (domain_id, name, type, content, ttl, prio) VALUES($forward_domain_id,?,?,?,3600,NULL)");

# Get entry - input: name, type; output: content
my $sth_select_ENTRY =
  $dbh->prepare("SELECT content from records where domain_id='$forward_domain_id' AND name=? AND type=?");

while(<>) {
  chomp;
  my ($name, $type, $content) = split(/\s+/, $_, 3);

  # type is uppercase; name and content are lowercase
  $type    =~ tr/a-z/A-Z/;
  $name    =~ tr/A-Z/a-z/;
  $content =~ tr/A-Z/a-z/;

  if ($type eq 'A') {
    my $host = $name;
    my $ip   = $content;
    my ($current_host, $current_ip, $current_reverse_entry);
  
    unless ($host and $type and $ip) {
      warn "Bad input: $_\n";
      next;
    }
  
    unless ($host =~ /^(.*?)\./) {
      $host .= '.' . $forward_domain;
    }
  
    # Get A record - input: hostname; output: IP
    $sth_select_A->execute($host) or die $DBI::errstr . "\n";
    ($current_ip) = $sth_select_A->fetchrow_array;
  
    # Get IP from A record - input: IP; output: hostname
    $sth_select_A_IP->execute($ip) or die $DBI::errstr . "\n";
    ($current_host) = $sth_select_A_IP->fetchrow_array;
  
    print "Adding A record for host $host with IP $ip: ";
    if ($current_ip) {
      if ($current_ip eq $ip) {
        print "already exists\n";
      }
      else {
        print "existing A record for host $host with different IP $current_ip\n";
      }
    }
    elsif ($current_host) {
      print "existing A record for different host $current_host with IP $ip\n";
    }
    else {
      print "ok\n";
      # Add A record - input: hostname, IP
      $sth_insert_A->execute($host, $ip) or die $DBI::errstr . "\n";
    }
  
    my @f = split(/\./, $ip);
    my $reverse_entry = join(".", reverse @f) . '.in-addr.arpa';
  
    # Get PTR record - input: reverse IP; output hostname
    $sth_select_PTR->execute($reverse_entry) or die $DBI::errstr . "\n";
    ($current_host) = $sth_select_PTR->fetchrow_array;
  
    # Get reverse IP from PTR record - input: hostname; output: reverse IP
    $sth_select_PTR_host->execute($host) or die $DBI::errstr . "\n";
    ($current_reverse_entry) = $sth_select_PTR_host->fetchrow_array;
  
    print "Adding PTR record for reverse IP $reverse_entry with host $host: ";
    if ($current_host) {
      if ($current_host eq $host) {
        print "already exists\n";
      }
      else {
        print "existing PTR record for reverse IP $reverse_entry with different host $current_host\n";
      }
    }
    elsif ($current_reverse_entry) {
      print "existing PTR record for different reverse IP $current_reverse_entry with host $host\n";
    }
    else {
      print "ok\n";
      # Add PTR (in-addr.arpa) record - input: reverse IP, hostname
      $sth_insert_PTR->execute($reverse_entry, $host) or die $DBI::errstr . "\n";
    }
  }
  else {
    unless (($name =~ /^\d/) or ($name =~ /^(.*?)\./)) {
      $name .= '.' . $forward_domain;
    }
    unless (($content =~ /^\d/) or ($content =~ /^(.*?)\./) or ($type eq 'MX')) {
      $content .= '.' . $forward_domain;
    }
    # Get entry - input: name, type; output: content
    $sth_select_ENTRY->execute($name, $type) or die $DBI::errstr . "\n";
    my ($current_content) = $sth_select_ENTRY->fetchrow_array;

    print "Adding $type record: name $name, content $content: ";
    if ($current_content) {
      if ($current_content eq $content) {
        print "$current_content\n";
        print "already exists\n";
      }
      else {
        print "existing $type record for $name with different value $current_content\n";
      }
    }
    else {
      print "ok\n";
      # Add entry - input: name, type, content
      $sth_insert_ENTRY->execute($name, $type, $content) or die $DBI::errstr . "\n";
    }
  }
}

